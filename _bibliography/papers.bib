---
---

@inproceedings{sketchovsky,
  abbr={NSDI},
  title={Sketchovsky: Enabling Ensembles of Sketches on Programmable Switches},
  author={Namkung, Hun and Liu, Zaoxing and Kim, Daehyeok and Sekar, Vyas and Steenkiste, Peter},
  booktitle={20th USENIX Symposium on Networked Systems Design and Implementation (NSDI)},
  abstract={Network operators need to run diverse measurement tasks on programmable switches to support management decisions (e.g., traffic engineering or anomaly detection). While prior work has shown the viability of running a single sketch instance, they largely ignore the problem of running an ensemble of sketch instances for a collection of measurement tasks. As such, existing efforts fall short of efficiently supporting a general ensemble of sketch instances. In this work, we present the design and implementation of Sketchovsky, a novel cross-sketch optimization and composition framework. We identify five new cross-sketch optimization building blocks to reduce critical switch hardware resources. We design efficient heuristics to select and apply these building blocks for arbitrary ensembles. To simplify developer effort, Sketchovsky automatically generates the composed code to be input to the hardware compiler. Our evaluation shows that Sketchovsky makes ensembles with up to 18 sketch instances become feasible and can reduce up to 45% of the critical hardware resources.},
  year={2023},
  pdf={nsdi23fall-final119.pdf},
  selected={true},
  slides={sketchovsky.pptx},
}

@inproceedings{sketchlib,
  abbr={NSDI},
  title={SketchLib: Enabling Efficient Sketch-based Monitoring on Programmable Switches},
  author={Namkung, Hun and Liu, Zaoxing and Kim, Daehyeok and Sekar, Vyas and Steenkiste, Peter},
  booktitle={19th USENIX Symposium on Networked Systems Design and Implementation (NSDI)},
  abstract={Sketching algorithms or sketches enable accurate network measurement results with low resource footprints. While emerging programmable switches are an attractive target to get these benefits, current implementations of sketches are either inefficient and/or infeasible on hardware. Our contributions in the paper are: (1) systematically analyzing the resource bottlenecks of existing sketch implementations in hardware; (2) identifying practical and correct-by-construction optimization techniques to tackle the identified bottlenecks; and (3) designing an easy-to-use library called SketchLib to help developers efficiently implement their sketch algorithms in switch hardware to benefit from these resource optimizations. Our evaluation on state-of-the-art sketches demonstrates that SketchLib reduces the hardware resource footprint up to 96% without impacting fidelity.},
  year={2022},
  pdf={nsdi22-sketchlib.pdf},
  selected={true},
  slides={sketchlib.pptx},
  website={https://www.youtube.com/watch?v=FwDljFlXXCA&t=1s},
}

@inproceedings{accusketch,
  abbr={SOSR},
  title={Telemetry Retrieval Inaccuracy in Programmable Switches: Analysis and Recommendations},
  author={Namkung, Hun and Kim, Daehyeok and Liu, Zaoxing and Sekar, Vyas and Steenkiste, Peter },
  booktitle={Proceedings of the Symposium on SDN Research (SOSR)},
  abstract={Sketching algorithms or sketches are attractive as telemetry capabilities on programmable hardware switches since they offer rigorous accuracy guarantees and use compact data structures. However, we find that in practice, their actual implementations can have a significant (up to 94\times×) accuracy drop compared to theoretical expectations. We find that the delays incurred by pulling and resetting the data plane state induce accuracy degradation. We design and implement solutions to reduce the delays and show that our solutions can help eliminate almost all the inaccuracy of existing sketch workflows.},
  year={2021},
  pdf={sosr21-telemetry.pdf},
  selected={true},
  slides={sosr.pptx},
  website={https://drive.google.com/file/d/10-c1QF2SzY579enC8_FY3u0HTQsQDR2g/view?usp=share_link},
}

@inproceedings{liu2021jaqen,
  abbr={Usenix Security},
  title={Jaqen: A high-performance switch-native approach for detecting and mitigating volumetric ddos attacks with programmable switches},
  author={Liu, Zaoxing and Namkung, Hun and Nikolaidis, Georgios and Lee, Jeongkeun and Kim, Changhoon and Jin, Xin and Braverman, Vladimir and Yu, Minlan and Sekar, Vyas},
  booktitle={30th USENIX Security Symposium (USENIX Security)},
  abstract={The emergence of programmable switches offers a new opportunity to revisit ISP-scale defenses for volumetric DDoS attacks. In theory, these can offer better cost vs. performance vs. flexibility trade-offs relative to proprietary hardware and virtual appliances. However, the ISP setting creates unique challenges in this regard—we need to run a broad spectrum of detection and mitigation functions natively on the programmable switch hardware and respond to dynamic adaptive attacks at scale. Thus, prior efforts in using programmable switches that assume out-of-band detection and/or use switches merely as accelerators for specific tasks are no longer sufficient, and as such, this potential remains unrealized. To tackle these challenges, we design and implement Jaqen, a switch-native approach for volumetric DDoS defense that can run detection and mitigation functions entirely inline on switches, without relying on additional data plane hardware. We design switch-optimized, resource-efficient detection and mitigation building blocks. We design a flexible API to construct a wide spectrum of best-practice (and future) defense strategies that efficiently use switch capabilities. We build a network-wide resource manager that quickly adapts to the attack posture changes. Our experiments show that Jaqen is orders of magnitude more performant than existing systems: Jaqen can handle large-scale hybrid and dynamic attacks within seconds, and mitigate them effectively at high line-rates (380 Gbps).},
  year={2021},
  pdf={USENIX_Security21_Jaqen.pdf},
}

@inproceedings{liu2021sketchy,
  abbr={TaPoPF},
  title={Sketchy With a Chance of Adoption: Can Sketch-Based Telemetry Be Ready for Prime Time?},
  author={Liu, Zaoxing and Namkung, Hun and Agarwal, Anup and Manousis, Antonis and Steenkiste, Peter and Seshan, Srinivasan and Sekar, Vyas},
  abstract={Sketching algorithms or sketches have emerged as a promising alternative to the traditional packet samplingbased network telemetry solutions. At a high level, they are attractive because of their high resource efficiency and provable accuracy guarantees. While there have been significant recent advances in various aspects of sketching for networking tasks, many fundamental challenges remain unsolved that are likely stumbling blocks for adoption. Our contribution in this paper is in identifying and formulating these research challenges across the ecosystem encompassing network operators, platform vendors/developers, and algorithm designers. We hope that these serve as a necessary fillip for the community to enable the broader adoption of sketch-based telemetry.},
  booktitle={2021 IEEE 7th International Conference on Network Softwarization (NetSoft)},
  pages={9--16},
  year={2021},
  organization={IEEE},
  pdf={TaPoPF21_Sketching.pdf},
}

@inproceedings{kim2016enabling,
  abbr={CoNEXT},
  title={Enabling automatic protocol behavior analysis for android applications},
  author={Kim, Jeongmin and Choi, Hyunwoo and Namkung, Hun and Choi, Woohyun and Choi, Byungkwon and Hong, Hyunwook and Kim, Yongdae and Lee, Jonghyup and Han, Dongsu},
  booktitle={Proceedings of the 12th International on Conference on emerging Networking EXperiments and Technologies (CoNEXT)},
  abstract={Understanding app-specific behavior is important for network operation and management. However, it is often difficult because it requires an in-depth application-layer protocol analysis due to the common use of HTTP(S) and standard data representations (e.g., JSON). This paper presents Extractocol, the first system to offer an automatic and comprehensive analysis of application protocol behaviors for Android applications. Extractocol only uses Android application binary as input and accurately reconstructs HTTP transactions (request-response pairs) and identifies their message formats and relationships using binary analysis. Our evaluation and in-depth case studies on closed-source and open-source apps demonstrate that Extractocol accurately reconstructs network message formats and characterizes network-related application behaviors.},
  pages={281--295},
  year={2016},
  pdf={kim-conext16.pdf},
}
